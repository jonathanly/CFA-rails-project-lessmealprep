name: Wait 60 Seconds

on:
  push:
    branches: [ master ]
  pull_request:
  workflow_dispatch:

jobs:
  wait-and-pass:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout merge commit
        uses: actions/checkout@v4
        with:
          # Explicitly use github.ref which is refs/pull/:number/merge for PRs
          ref: ${{ github.ref }}

      - name: Display commit info
        run: |
          echo "Checking out refspec: ${{ github.ref }}"
          echo "Current commit: $(git rev-parse HEAD)"

      - name: Check PR info via GitHub API
        if: github.event_name == 'pull_request'
        run: |
          echo "Querying PR #${{ github.event.pull_request.number }} for status information"
          echo ""

          # Get PR details including status checks
          PR_DATA=$(curl -s -H "Authorization: token ${{ github.token }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}")

          echo "Merge commit SHA:"
          echo "$PR_DATA" | jq -r '.merge_commit_sha'

          echo ""
          echo "PR Head SHA (where statuses are posted):"
          echo "$PR_DATA" | jq -r '.head.sha'

          echo ""
          echo "PR Base SHA:"
          echo "$PR_DATA" | jq -r '.base.sha'

          echo ""
          echo "Mergeable state:"
          echo "$PR_DATA" | jq -r '.mergeable_state'

          echo "Full response:"
          echo "$PR_DATA" | jq '.'

          echo ""
          echo "Now checking statuses on the HEAD SHA..."
          HEAD_SHA=$(echo "$PR_DATA" | jq -r '.head.sha')

          STATUS_DATA=$(curl -s -H "Authorization: token ${{ github.token }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/jonathanly/${{ github.repository }}/commits/$HEAD_SHA/statuses")

          echo ""
          echo "Workflow context information:"
          echo "github.sha (merge commit): ${{ github.sha }}"
          echo "github.event.pull_request.head.sha (PR head): ${{ github.event.pull_request.head.sha }}"

          echo ""
          echo "Full response:"
          echo "$STATUS_DATA" | jq '.'

      - name: Query commit status info
        if: github.event_name == 'pull_request'
        run: |
          echo "Querying all statuses for commit: ${{ github.sha }}"
          echo "Repository: ${{ github.repository }}"
          echo ""

          # Query commit statuses (legacy status API)
          echo "=== Commit Statuses (Legacy API) ==="
          STATUS_DATA=$(curl -s -H "Authorization: token ${{ github.token }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/status")

          echo "Combined state: $(echo "$STATUS_DATA" | jq -r '.state')"
          echo ""
          echo "All statuses:"
          echo "$STATUS_DATA" | jq -r '.statuses[] | "  [\(.state)] \(.context) - \(.description)"'

          echo ""
          echo "=== Check Runs (newer API used by GitHub Actions) ==="
          CHECK_RUNS=$(curl -s -H "Authorization: token ${{ github.token }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs")

          echo "Total check runs: $(echo "$CHECK_RUNS" | jq -r '.total_count')"
          echo ""
          echo "All check runs:"
          echo "$CHECK_RUNS" | jq -r '.check_runs[] | "  [\(.status)/\(.conclusion // "pending")] \(.name) - \(.html_url)"'

          echo ""
          echo "=== Context Information ==="
          echo "Event type: ${{ github.event_name }}"
          echo "github.sha (workflow commit): ${{ github.sha }}"

      - name: Wait for 3 seconds
        run: sleep 3

      - name: Success
        run: echo "âœ… Waited 3 seconds successfully!"

  # manual-approval:
  #   runs-on: ubuntu-latest
  #   needs: wait-and-pass
  #   if: github.event_name == 'pull_request'

  #   steps:
  #     - name: Await Manual Approval
  #       uses: trstringer/manual-approval@v1
  #       with:
  #         secret: ${{ github.TOKEN }}
  #         approvers: jonathanly
  #         minimum-approvals: 1
  #         exclude-workflow-initiator-as-approver: false
  #         fail-on-denial: true
  #         issue-title: "Manual Approval Required for deployment"
  #         issue-body: "Please approve or deny the deployment."

  # # Get the combined status for this commit
  # RESPONSE=$(curl -s -H "Authorization: token ${{ github.token }}" \
  #      -H "Accept: application/vnd.github.v3+json" \
  #      "https://api.github.com/repos/${{ github.repository }}/commits/${{ github.sha }}/status")

  # echo "Full response:"
  # echo "$RESPONSE" | jq '.'

  # echo ""
  # echo "SHA from status:"
  # echo "$RESPONSE" | jq -r '.sha'

  # echo ""
  # echo "State:"
  # echo "$RESPONSE" | jq -r '.state'

  # echo ""
  # echo "Status contexts:"
  # echo "$RESPONSE" | jq -r '.statuses[]? | "\(.context): \(.state)"'
